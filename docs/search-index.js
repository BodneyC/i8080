var searchIndex = JSON.parse('{\
"i8080":{"doc":"An Intel 8080 emulator and assembler","t":[0,0,0,5,0,0,0,0,0,0,0,0,0,14,5,5,0,3,3,12,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,5,11,11,12,12,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,11,11,5,5,4,13,4,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,13,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,6,5,5,5,5,5,17,13,13,13,13,17,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,5,5,5,5,5,3,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,11,3,12,12,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,11,12,12,11,12,12,11,5,11,11,11,12,11,12,13,3,3,4,13,3,13,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,17,17,17,17,17,3,12,12,12,11,11,11,11,12,11,12,11,11,11,11,11,12,5,11,11,11,11,11,11,12,11,11,11,11,11,11,17,14,0,0,0,0,5,5,0,5,5,3,3,11,11,11,11,0,12,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,3,11,11,12,11,11,11,11,11,11,12,0,11,11,11,11,17,17,17,17,17,17,17,3,12,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,17,17,3,17,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,0,11,12,11,11,12,11,11,11,12,11,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,17,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,11,11,12,12,11,12,11,11,11,11,11,12,11,12,11,12,11,11,11,11,12,11,11,11,11,5,5,5,5,5,5],"n":["asm","cli","ecodes","main","meta","sys","util","assemble","disassemble","errors","expressions","find_op_code","label","ok_or_return","run_assembler","run_disassmbler","tokenizer","Assembler","Macro","args","assemble","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone_into","default","erroring_line","fmt","from","from","gen_for_instruction","gen_for_line","gen_for_macro_at","gen_for_macro_call","gen_macros","generate_prog","get_reg_defs","into","into","labels","lines","lines","load_file","macros","new","new","parse_at","print_err_msg","prog_width","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uses_pc","vzip","vzip","width","width_of_data_storage","write","disassemble_instruction","disassemble_vec","AssemblerError","CodeGen","CodeGenError","DefineInMacro","DisassembleError","ExpressionError","FileRead","IfAndMacroMix","InvalidArgument","InvalidLabel","InvalidRegister","LabelAlreadyDefined","MacroCallInMacroUsesSp","MacroUseBeforeCreation","MovAsHalt","NestedIf","NestedMacro","NoArgsForVariadic","NoEndIf","NoEndMacro","NoInstructionFound","NoRemainingBytes","NoSuchInstruction","NotEnoughBytes","NotInIf","NotInMacro","OpParseError","OperationRequiresLabel","OrigInMacro","Parser","ParserError","ParserError","RecursiveMacro","UnexpectedLength","UnknownDefine","UnknownError","UnknownRegister","UnterminatedString","WrongNumberOfArgs","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","1","0","0","0","1","1","2","0","0","0","0","0","0","0","0","0","0","1","1","1","errors","lexer","parser","rpn","shunting_yard","token","CalculationError","ExpressionError","MetaUsedInCalculation","NotANumber","NumberParseError","UnknownEscape","UnknownIdentifier","UnknownUnary","UnmatchedParens","UnmatchedQuote","UnprocessableChar","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","0","0","ExprFlags","Lexer","address","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","consume_identifier","consume_number","consume_string","eq","equivalent","fmt","from","from","functions","into","into","iter","lex","ne","new","new","pc","psw","sp","string","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ExprOutput","parse_expression","parse_expression_u16","calculate","operate","transform","LEFT_ASSOC","LParen","MetaIdentifier","Number","Operator","RIGHT_ASSOC","RParen","String","Token","Unary","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","ne","to_owned","try_from","try_into","type_id","vzip","0","0","0","0","0","1","2","from_args","from_args_and_sp_psw","with_all_regs","with_b_or_d","with_word_regs","Label","borrow","borrow_mut","clone","clone_into","fmt","from","into","is_addr","is_eq","is_set","new_addr","new_equ","new_set","to_owned","try_from","try_into","type_id","value","vzip","LineMeta","address","args_list","borrow","borrow_mut","clone","clone_into","comment","default","eq","equivalent","erroring","fmt","from","from_raw","inst","into","label","label_only","label_only","line_no","ne","op_code","raw_line","to_owned","tokenize","try_from","try_into","type_id","uses_pc","vzip","width","Assemble","AssembleArgs","Cli","Commands","Disassemble","DisassembleArgs","Run","RunArgs","assemble","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","command","emulate_clock_speed","file","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","has_subcommand","hlt","input","input","interactive","into","into","into","into","into","into_app","into_app_for_update","load_at","load_at","no_console","output","output","randomize","register_definitions","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","vzip","vzip","vzip","vzip","vzip","0","0","0","E_ASSEMBLER","E_DISASSEMBLER","E_IO_ERROR","E_SUCCESS","I8080_OP_META","OpMeta","argb","argw","asm_arg_count","borrow","borrow_mut","clone","clone_into","cycles","default","define","eq","equivalent","fmt","from","into","labelled","load_op_meta","ne","new_argb","new_argw","new_define","new_labelled","new_no_args","op","to_owned","try_from","try_into","type_id","vzip","width","PROMPT_HELP","continue_on_err","device","flags","i8080","memory","parse_number","prompt_cycle","registers","run_interactive","run_system","RxDevice","TxDevice","borrow","borrow","borrow_mut","borrow_mut","console_device","eot_byte","from","from","into","into","new","new","rx","try_from","try_from","try_into","try_into","tx","type_id","type_id","vzip","vzip","ConsoleDevice","borrow","borrow_mut","echo","from","into","new","run","run_echo","run_no_echo","rx","special_chars","try_from","try_into","type_id","vzip","BEL","BS","CR","EOT","ETB","LF","NUL","Flags","aux_carry","borrow","borrow_mut","carry","default","fmt","from","from_byte","into","new","parity","parity","sign","to_byte","try_from","try_into","type_id","vzip","zero","zero_sign_parity","CYCLES_PER_STEP","FREQUENCY","I8080","STEP_MS","add","ana","borrow","borrow_mut","call","cmp","current_state","cycle","cycles","daa","dad","dcr","describe_system","dev_in","dev_out","execute","execute","flags","fmt_instruction","from","from_time","get_memory_slice","get_pc","halt","halted","inr","interactive","interrupt_flip_flop","interrupt_op_code","into","issue_interrupt","jmp","load","log_components","log_cycle","memory","new","ora","pc_argb","pc_argw","pc_inst","pop","pop_psw","push","push_psw","ral","randomize","rar","registers","ret","rlc","rrc","run","rx_devices","sleep_for_hz","sub","try_from","try_into","tx_devices","type_id","vzip","xchg","xra","xthl","MAX_MEM","Memory","borrow","borrow_mut","fmt","from","get_slice","into","load","mem","new","randomize","read_byte","read_word_big_endian","read_word_little_endian","try_from","try_into","type_id","vzip","write_byte","write_word_big_endian","write_word_little_endian","Registers","a","b","borrow","borrow_mut","c","d","default","e","fmt","from","get_bc","get_de","get_hl","h","into","l","new","pc","randomize","set_bc","set_de","set_hl","sp","try_from","try_into","type_id","vzip","char_width_one","is_bit_set","read_file_to_vec_u8","read_lines","u16_to_vec_u8","vec_u8_to_u16"],"q":["i8080","","","","","","","i8080::asm","","","","","","","","","","i8080::asm::assemble","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","i8080::asm::disassemble","","i8080::asm::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","i8080::asm::errors::AssemblerError","","","i8080::asm::errors::CodeGenError","","","i8080::asm::errors::DisassembleError","","","","","","i8080::asm::errors::OpParseError","i8080::asm::errors::ParserError","","","","","","","","","","","","i8080::asm::expressions","","","","","","i8080::asm::expressions::errors","","","","","","","","","","","","","","","","","","","","","","i8080::asm::expressions::errors::ExpressionError","","","","","","","","","i8080::asm::expressions::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","i8080::asm::expressions::parser","","","i8080::asm::expressions::rpn","","i8080::asm::expressions::shunting_yard","i8080::asm::expressions::token","","","","","","","","","","","","","","","","","","","","","","","","i8080::asm::expressions::token::Token","","","","","","","i8080::asm::find_op_code","","","","","i8080::asm::label","","","","","","","","","","","","","","","","","","","","i8080::asm::tokenizer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","i8080::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","i8080::cli::Commands","","","i8080::ecodes","","","","i8080::meta","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","i8080::sys","","","","","","","","","","","i8080::sys::device","","","","","","","","","","","","","","","","","","","","","","","","i8080::sys::device::console_device","","","","","","","","","","","","","","","","i8080::sys::device::console_device::special_chars","","","","","","","i8080::sys::flags","","","","","","","","","","","","","","","","","","","","","i8080::sys::i8080","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","i8080::sys::memory","","","","","","","","","","","","","","","","","","","","","","i8080::sys::registers","","","","","","","","","","","","","","","","","","","","","","","","","","","","i8080::util","","","","",""],"d":["Contains the assembler and disassembler","Cli argument structures","Exit codes","","Metadata for 8080 instructions","System and emulator","","8080 assembler","8080 disassembler","Various error which may be returned by the assembler","Expression-parser","Find the operation code for a given string","Label container specifying the type of value/instruction …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Fill the macros with useful bytes","Because of the ORG instruction, we preallocate the vec so …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Holy shit, this does a lot. And might be the single worst …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The ParserError should only be logged to the user","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Simplistic IO device","","","","","","","","","","","","","","","Console printing device for the emulator","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Adds a value to the A register","Performs a logical AND between a given value and A","","","","Comapres a value against the A register","","","","Decimal Adjust Accumulator, represents the 8-bit value as …","Double add, adds a word (a double) to HL","Decrement a value, setting flags","Example of the output as the format string is not …","Read a byte from the specified in-device and writes it to A","Writes a byte (usually A) to the specified out-device","","","","","Returns the argument unchanged.","","","","Halts the CPU at the end of the current cycle (if using …","","Increment a value, setting flags","","","","Calls <code>U::from(self)</code>.","","Continues execution at a given address based on a condition","","","","","","Performs a logical OR between a given value and A","Get the byte argument at PC+1","Get the word argument at PC+1","Get the instruction at PC","Pop a value from the stack","Push A and the flags register to the stack","Push a value onto the stack","Push A and the flags register to the stack","Rotate A left once, with carry","","Rotate A right once, with carry","","","Rotate A left once, no carry","Rotate A right once, no carry","","","","Subtracts a value from the A register","","","","","","Exchange the value of HL with DE","Performs a logical XOR between a given value and A","Exchange the value pointed to by the stack pointer with …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,2,2,2,2,2,1,2,1,2,1,1,1,1,1,1,0,1,2,1,1,2,1,1,1,2,1,1,1,2,1,2,1,2,1,2,2,1,2,2,1,1,0,0,0,3,0,4,0,4,3,4,4,4,5,4,4,4,5,4,4,4,4,4,4,6,5,6,4,4,0,4,4,3,0,7,4,7,4,6,5,4,4,3,4,7,5,6,3,4,7,5,6,3,3,4,4,7,7,5,5,6,6,3,3,3,4,4,7,7,7,5,6,3,4,7,5,6,3,4,7,5,6,3,4,7,5,6,3,4,7,5,6,3,4,7,5,6,3,4,7,5,6,8,9,10,11,12,12,13,14,15,14,15,14,16,17,18,19,20,21,22,23,24,25,19,21,24,0,0,0,0,0,0,26,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,33,34,35,0,0,36,36,37,36,37,37,37,36,36,36,37,37,37,36,37,0,36,37,36,36,37,36,37,37,37,37,37,37,36,37,36,37,36,37,36,37,0,0,0,0,0,0,0,38,38,38,38,0,38,38,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,40,41,42,43,39,39,0,0,0,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,45,45,45,45,45,45,46,0,0,0,46,0,46,0,47,48,47,49,50,48,47,49,50,46,46,48,46,47,49,50,48,46,47,49,50,48,47,47,48,46,47,49,50,48,46,47,49,50,48,46,47,49,50,46,49,49,50,47,48,46,47,49,50,48,48,47,49,47,49,50,47,49,48,46,47,49,50,48,46,47,49,50,48,46,47,49,50,48,46,47,49,50,48,46,47,49,50,51,52,53,0,0,0,0,0,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,55,56,55,56,0,55,55,56,55,56,55,56,56,55,56,55,56,55,55,56,55,56,0,57,57,57,57,57,57,57,57,57,57,0,57,57,57,57,0,0,0,0,0,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0],"f":[null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,[[["assembleargs",3]],["i32",0]],[[["disassembleargs",3]],["i32",0]],null,null,null,null,[[["",0]],["result",4,[["vec",3,[["u8",0]]],["assemblererror",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["macro",3]],[[["",0],["",0]]],[[],["macro",3]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["linemeta",3],["u16",0]],["result",4,[["codegenerror",4]]]],[[["",0],["linemeta",3],["u16",0],["bool",0]],["result",4,[["codegenerror",4]]]],[[["",0],["macro",3],["u16",0]],["result",4,[["vec",3,[["u8",0]]],["codegenerror",4]]]],[[["",0],["linemeta",3],["u16",0],["bool",0]],["result",4,[["codegenerror",4]]]],[[["",0]],["result",4,[["codegenerror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["codegenerror",4]]]],[[],["hashmap",3,[["string",3],["label",3]]]],[[]],[[]],null,null,null,[[["",0]],["result",4,[["vec",3,[["linemeta",3]]],["assemblererror",4]]]],null,[[["assembleargs",3]]],[[]],[[["",0],["vec",3,[["linemeta",3]]],["u16",0]],["result",4,[["parsererror",4]]]],[[["",0],["assemblererror",4]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],null,[[["",0],["string",3]],["result",4,[["usize",0],["parsererror",4]]]],[[["",0],["vec",3,[["u8",0]]]],["result",4,[["error",3]]]],[[["usize",0]],["result",4,[["disassembleerror",4]]]],[[],["result",4,[["vec",3,[["string",3]]],["disassembleerror",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["parsererror",4]]],[[["codegenerror",4]]],[[["expressionerror",4]]],[[]],[[]],[[["expressionerror",4]]],[[["parsererror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["exprflags",3]],[[["",0],["",0]]],[[["",0]],["string",3]],[[["",0]]],[[["",0]],["result",4,[["string",3],["expressionerror",4]]]],[[["",0],["exprflags",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["string",3]],["option",4,[["token",4]]]],[[]],[[]],null,[[["",0],["str",0],["u16",0],["hashmap",3]],["result",4,[["expressionerror",4]]]],[[["",0],["exprflags",3]],["bool",0]],[[]],[[]],null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,[[["into",8,[["string",3]]],["u16",0],["hashmap",3]],["result",4,[["expressionerror",4]]]],[[["into",8,[["string",3]]],["u16",0],["hashmap",3]],["result",4,[["expressionerror",4]]]],[[],["result",4,[["u16",0],["expressionerror",4]]]],[[["char",0],["u16",0],["u16",0]],["u16",0]],[[["vec",3,[["token",4]]]],["result",4,[["vec",3,[["token",4]]],["expressionerror",4]]]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["token",4]],[[["",0],["",0]]],[[["",0],["token",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["token",4]],["bool",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,[[["str",0],["u16",0],["u16",0]],["result",4,[["usize",0],["opparseerror",4]]]],[[["str",0],["u16",0],["u16",0],["bool",0],["bool",0]],["result",4,[["usize",0],["opparseerror",4]]]],[[["u16",0],["u16",0],["u16",0],["bool",0]],["result",4,[["usize",0],["opparseerror",4]]]],[[["u16",0],["u16",0],["bool",0]],["result",4,[["usize",0],["opparseerror",4]]]],[[["u16",0],["u16",0],["bool",0]],["result",4,[["usize",0],["opparseerror",4]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["label",3]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,null,null,[[["option",4,[["u16",0]]]]],[[["option",4,[["u16",0]]]]],[[["option",4,[["u16",0]]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["linemeta",3]],[[["",0],["",0]]],null,[[],["linemeta",3]],[[["",0],["linemeta",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["linemeta",3]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["usize",0],["string",3]]],null,[[]],null,[[["option",4,[["string",3]]],["option",4,[["string",3]]],["string",3]]],null,null,[[["",0],["linemeta",3]],["bool",0]],null,null,[[["",0]]],[[["str",0]],["result",4,[["option",4,[["linemeta",3]]],["parsererror",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],null,null,null,null,null,null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["str",0]],["bool",0]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["command",6]],[[],["command",6]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opmeta",3]],[[["",0],["",0]]],null,[[],["opmeta",3]],null,[[["",0],["opmeta",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[["",0],["opmeta",3]],["bool",0]],[[["str",0],["usize",0],["u8",0]]],[[["str",0],["usize",0],["u8",0]]],[[["str",0],["usize",0]]],[[["str",0],["usize",0]]],[[["str",0],["usize",0],["u8",0]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0]],["usize",0]],null,null,null,null,null,null,[[["str",0]],["result",4,[["u16",0],["parseinterror",3]]]],[[["i8080",3]],["bool",0]],null,[[["i8080",3]]],[[["runargs",3]],["i32",0]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[]],[[]],[[]],[[]],[[["sender",3,[["u8",0]]],["u8",0]]],[[["receiver",3,[["u8",0]]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],[[["receiver",3,[["u8",0]]],["bool",0]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[],["flags",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["u8",0]]],[[]],[[]],[[["u8",0]],["bool",0]],null,null,[[["",0]],["u8",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0],["u8",0]]],null,null,null,null,[[["",0],["u8",0],["bool",0]]],[[["",0],["u8",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["u16",0],["option",4,[["bool",0]]]]],[[["",0],["u8",0]]],null,[[["",0]]],null,[[["",0]]],[[["",0],["u16",0]]],[[["",0],["u8",0]],["u8",0]],[[["",0]],["string",3]],[[["",0],["usize",0]],["u8",0]],[[["",0],["usize",0],["u8",0]]],null,[[["",0],["u8",0]]],null,[[["",0],["u8",0],["opmeta",3],["u16",0],["bool",0]],["string",3]],[[]],null,[[["",0],["u16",0],["u16",0]],["vec",3,[["u8",0]]]],[[["",0]],["u16",0]],[[["",0]]],null,[[["",0],["u8",0]],["u8",0]],null,null,null,[[]],[[["",0],["u8",0]]],[[["",0],["u16",0],["bool",0]]],[[["",0],["u16",0],["vec",3,[["u8",0]]]],["usize",0]],[[["",0]]],[[["",0]]],null,[[["vec",3,[["rxdevice",3]]],["vec",3,[["txdevice",3]]]]],[[["",0],["u8",0]]],[[["",0]],["u8",0]],[[["",0]],["u16",0]],[[["",0]],["u8",0]],[[["",0]],["u16",0]],[[["",0]]],[[["",0],["u16",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,[[["",0],["option",4,[["bool",0]]]]],[[["",0]]],[[["",0]]],[[["",0],["bool",0]]],null,[[["",0]]],[[["",0],["u8",0],["bool",0]]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[]],[[["",0]]],[[["",0],["u8",0]]],[[["",0]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["u16",0],["u16",0]],["vec",3,[["u8",0]]]],[[]],[[["",0],["u16",0],["vec",3,[["u8",0]]]],["usize",0]],null,[[]],[[["",0]]],[[["",0],["u16",0]],["u8",0]],[[["",0],["u16",0]],["u16",0]],[[["",0],["u16",0]],["u16",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0],["u16",0],["u8",0]]],[[["",0],["u16",0],["u16",0]]],[[["",0],["u16",0],["u16",0]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[],["registers",3]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["u16",0]],[[["",0]],["u16",0]],[[["",0]],["u16",0]],null,[[]],null,[[]],null,[[["",0]]],[[["",0],["u16",0]]],[[["",0],["u16",0]]],[[["",0],["u16",0]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["u8",0]],["char",0]],[[["u8",0],["u8",0]],["bool",0]],[[["asref",8,[["path",3]]]],["result",4,[["vec",3,[["u8",0]]],["error",3]]]],[[["asref",8,[["path",3]]]],["result",6,[["lines",3,[["bufreader",3,[["file",3]]]]]]]],[[["u16",0]],["vec",3,[["u8",0]]]],[[],["u16",0]]],"p":[[3,"Assembler"],[3,"Macro"],[4,"AssemblerError"],[4,"ParserError"],[4,"OpParseError"],[4,"DisassembleError"],[4,"CodeGenError"],[13,"FileRead"],[13,"Parser"],[13,"CodeGen"],[13,"ParserError"],[13,"UnexpectedLength"],[13,"NoRemainingBytes"],[13,"NotEnoughBytes"],[13,"UnknownError"],[13,"NoSuchInstruction"],[13,"ExpressionError"],[13,"UnknownDefine"],[13,"WrongNumberOfArgs"],[13,"OperationRequiresLabel"],[13,"InvalidArgument"],[13,"UnterminatedString"],[13,"InvalidLabel"],[13,"LabelAlreadyDefined"],[13,"NoInstructionFound"],[4,"ExpressionError"],[13,"UnprocessableChar"],[13,"UnknownIdentifier"],[13,"NumberParseError"],[13,"UnmatchedQuote"],[13,"UnknownEscape"],[13,"CalculationError"],[13,"UnknownUnary"],[13,"NotANumber"],[13,"MetaUsedInCalculation"],[3,"Lexer"],[3,"ExprFlags"],[4,"Token"],[13,"Operator"],[13,"String"],[13,"Number"],[13,"MetaIdentifier"],[13,"Unary"],[3,"Label"],[3,"LineMeta"],[4,"Commands"],[3,"RunArgs"],[3,"Cli"],[3,"AssembleArgs"],[3,"DisassembleArgs"],[13,"Run"],[13,"Assemble"],[13,"Disassemble"],[3,"OpMeta"],[3,"TxDevice"],[3,"RxDevice"],[3,"ConsoleDevice"],[3,"Flags"],[3,"I8080"],[3,"Memory"],[3,"Registers"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};